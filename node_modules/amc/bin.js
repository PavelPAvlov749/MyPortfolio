#!/usr/bin/env node

const args = require('args');
const chalk = require('chalk');
const compress = require('./build/compressGLTF');

// quantization: {
//     POSITION: 12,
//     NORMAL: 6,
//     TEXCOORD: 10,
//     JOINT: 6,
//     WEIGHT: 6,
// }

args.config.name = 'amc-glTF';
args.option('input', 'The source glTF file')
    .option('output', 'The compressed glTF to save')
    .option(['p', 'quantize-position-bit'], 'The quantization bits for position data', 12)
    .option(['n', 'quantize-normal-bit'], 'The quantization bits for normal data', 8)
    .option(['u', 'quantize-uv-bit'], 'The quantization bits for uv data', 10)
    .option(['w', 'quantize-weight-bit'], 'The quantization bits for weight data', 6)
    .examples([{
        usage: 'amc-glTF -i path/to/source.gltf -o path/to/compressed.gltf',
        description: 'compress path/to/source.gltf then save to path/to/compressed.gltf'
    }]);

const flags = args.parse(process.argv);

if (!flags.input || !flags.output) {
    console.warn(chalk.red('  must have input and output path'));
    args.showHelp();
}

const quantization = {
    POSITION: flags.p,
    NORMAL: flags.n,
    TEXCOORD: flags.u,
    JOINT: 6,
    WEIGHT: flags.w,
};


async function run() {
    try {
        await compress(flags.input, flags.output, { quantization });
    } catch (err) {
        console.error('error', err);
    }
    console.log('amc-glTF compress done');
}

run();