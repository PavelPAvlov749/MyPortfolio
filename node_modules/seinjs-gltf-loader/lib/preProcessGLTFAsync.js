"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @File   : preProcessGLTFAsync.ts
 * @Author : dtysky (dtysky@outlook.com)
 * @Date   : 7/31/2019, 3:52:30 PM
 * @Description:
 */
var compressAsync = require('amc/build/compressGLTF');
var tmp = require("tmp");
var path = require("path");
var fs = require("fs");
var shell = require("shelljs");
var utils_1 = require("./utils");
function preProcessGLTFAsync(compress, inputPath, rootDir, quantization) {
    return __awaiter(this, void 0, void 0, function () {
        var filename, sourceDir, targetDir, removeTmp, targetFilePath, _a, _b, _c, gltfJSON, _d, _e, error_1, _f, _g, _h;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    filename = path.basename(inputPath);
                    sourceDir = path.dirname(inputPath);
                    targetDir = path.join(tmp.dirSync().name, sourceDir.replace(rootDir, ''));
                    if (!fs.existsSync(targetDir)) {
                        shell.mkdir('-p', targetDir);
                    }
                    removeTmp = function () {
                        shell.rm('-rf', targetDir);
                    };
                    targetFilePath = path.join(targetDir, filename);
                    if (!!compress) return [3 /*break*/, 3];
                    return [4 /*yield*/, utils_1.copyDir(sourceDir, targetDir)];
                case 1:
                    _j.sent();
                    console.log("Copy from '" + sourceDir + "' to '" + targetDir + "'");
                    _a = {
                        removeTmp: removeTmp,
                        filename: targetFilePath
                    };
                    _c = (_b = JSON).parse;
                    return [4 /*yield*/, utils_1.readFile(inputPath)];
                case 2: return [2 /*return*/, (_a.json = _c.apply(_b, [_j.sent()]),
                        _a.dir = targetDir,
                        _a)];
                case 3:
                    _j.trys.push([3, 8, , 11]);
                    return [4 /*yield*/, compressAsync(inputPath, targetFilePath, {
                            quantization: Object.assign({
                                POSITION: 13,
                                NORMAL: 8,
                                TEXCOORD: 10,
                                TEXCOORD_1: 10,
                                JOINT: 6,
                                WEIGHT: 6,
                                TANGENT: 10,
                            }, quantization)
                        })];
                case 4:
                    _j.sent();
                    _e = (_d = JSON).parse;
                    return [4 /*yield*/, utils_1.readFile(targetFilePath)];
                case 5:
                    gltfJSON = _e.apply(_d, [_j.sent()]);
                    return [4 /*yield*/, Promise.all((gltfJSON.images || []).map(function (obj) { return utils_1.copyFile(path.join(sourceDir, obj.uri), path.join(targetDir, obj.uri)); }))];
                case 6:
                    _j.sent();
                    return [4 /*yield*/, Promise.all((((gltfJSON.extensions || {}).Sein_audioClips || {}).clips || []).map(function (obj) { return utils_1.copyFile(path.join(sourceDir, obj.uri), path.join(targetDir, obj.uri)); }))];
                case 7:
                    _j.sent();
                    return [2 /*return*/, {
                            removeTmp: removeTmp,
                            filename: targetFilePath,
                            json: gltfJSON,
                            dir: targetDir,
                        }];
                case 8:
                    error_1 = _j.sent();
                    console.warn('Compression failed', error_1);
                    return [4 /*yield*/, utils_1.copyDir(sourceDir, targetDir)];
                case 9:
                    _j.sent();
                    console.log("Copy from '" + sourceDir + "' to '" + targetDir + "'");
                    _f = {
                        removeTmp: removeTmp,
                        filename: targetFilePath
                    };
                    _h = (_g = JSON).parse;
                    return [4 /*yield*/, utils_1.readFile(inputPath)];
                case 10: return [2 /*return*/, (_f.json = _h.apply(_g, [_j.sent()]),
                        _f.dir = targetDir,
                        _f)];
                case 11: return [2 /*return*/];
            }
        });
    });
}
exports.default = preProcessGLTFAsync;
