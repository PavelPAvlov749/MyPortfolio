var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var Cesium = require('cesium');
var hasExtension = require('./hasExtension');
var defined = Cesium.defined;
var isArray = Cesium.isArray;
module.exports = ForEach;
/**
 * Contains traversal functions for processing elements of the glTF hierarchy.
 * @constructor
 *
 * @private
 */
function ForEach() {
}
/**
 * Fallback for glTF 1.0
 * @private
 */
ForEach.objectLegacy = function (objects, handler) {
    if (defined(objects)) {
        for (var objectId in objects) {
            if (objects.hasOwnProperty(objectId)) {
                var object = objects[objectId];
                var value = handler(object, objectId);
                if (defined(value)) {
                    return value;
                }
            }
        }
    }
};
/**
 * @private
 */
ForEach.objectLegacyAsync = function (objects, handler) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, _i, objectId, object, value;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!defined(objects)) return [3 /*break*/, 4];
                    _a = [];
                    for (_b in objects)
                        _a.push(_b);
                    _i = 0;
                    _c.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    objectId = _a[_i];
                    if (!objects.hasOwnProperty(objectId)) return [3 /*break*/, 3];
                    object = objects[objectId];
                    return [4 /*yield*/, handler(object, objectId)];
                case 2:
                    value = _c.sent();
                    if (defined(value)) {
                        return [2 /*return*/, value];
                    }
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
};
/**
 * @private
 */
ForEach.object = function (arrayOfObjects, handler) {
    if (defined(arrayOfObjects)) {
        var length_1 = arrayOfObjects.length;
        for (var i = 0; i < length_1; i++) {
            var object = arrayOfObjects[i];
            var value = handler(object, i);
            if (defined(value)) {
                return value;
            }
        }
    }
};
/**
 * @private
 */
ForEach.objectAsync = function (arrayOfObjects, handler) {
    return __awaiter(this, void 0, void 0, function () {
        var length_2, i, object, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!defined(arrayOfObjects)) return [3 /*break*/, 4];
                    length_2 = arrayOfObjects.length;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < length_2)) return [3 /*break*/, 4];
                    object = arrayOfObjects[i];
                    return [4 /*yield*/, handler(object, i)];
                case 2:
                    value = _a.sent();
                    if (defined(value)) {
                        return [2 /*return*/, value];
                    }
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
};
/**
 * Supports glTF 1.0 and 2.0
 * @private
 */
ForEach.topLevel = function (gltf, name, handler) {
    var gltfProperty = gltf[name];
    if (defined(gltfProperty) && !isArray(gltfProperty)) {
        return ForEach.objectLegacy(gltfProperty, handler);
    }
    return ForEach.object(gltfProperty, handler);
};
/**
 * Supports glTF 1.0 and 2.0
 * @private
 */
ForEach.topLevelAsync = function (gltf, name, handler) {
    var gltfProperty = gltf[name];
    if (defined(gltfProperty) && !isArray(gltfProperty)) {
        return ForEach.objectLegacyAsync(gltfProperty, handler);
    }
    return ForEach.objectAsync(gltfProperty, handler);
};
ForEach.accessor = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'accessors', handler);
};
ForEach.accessorWithSemantic = function (gltf, semantic, handler) {
    var visited = {};
    return ForEach.mesh(gltf, function (mesh) {
        return ForEach.meshPrimitive(mesh, function (primitive) {
            var valueForEach = ForEach.meshPrimitiveAttribute(primitive, function (accessorId, attributeSemantic) {
                if (attributeSemantic.indexOf(semantic) === 0 && !defined(visited[accessorId])) {
                    visited[accessorId] = true;
                    var value = handler(accessorId);
                    if (defined(value)) {
                        return value;
                    }
                }
            });
            if (defined(valueForEach)) {
                return valueForEach;
            }
            return ForEach.meshPrimitiveTarget(primitive, function (target) {
                return ForEach.meshPrimitiveTargetAttribute(target, function (accessorId, attributeSemantic) {
                    if (attributeSemantic.indexOf(semantic) === 0 && !defined(visited[accessorId])) {
                        visited[accessorId] = true;
                        var value = handler(accessorId);
                        if (defined(value)) {
                            return value;
                        }
                    }
                });
            });
        });
    });
};
ForEach.accessorContainingVertexAttributeData = function (gltf, handler) {
    var visited = {};
    return ForEach.mesh(gltf, function (mesh) {
        return ForEach.meshPrimitive(mesh, function (primitive) {
            var valueForEach = ForEach.meshPrimitiveAttribute(primitive, function (accessorId) {
                if (!defined(visited[accessorId])) {
                    visited[accessorId] = true;
                    var value = handler(accessorId);
                    if (defined(value)) {
                        return value;
                    }
                }
            });
            if (defined(valueForEach)) {
                return valueForEach;
            }
            return ForEach.meshPrimitiveTarget(primitive, function (target) {
                return ForEach.meshPrimitiveTargetAttribute(target, function (accessorId) {
                    if (!defined(visited[accessorId])) {
                        visited[accessorId] = true;
                        var value = handler(accessorId);
                        if (defined(value)) {
                            return value;
                        }
                    }
                });
            });
        });
    });
};
ForEach.accessorContainingIndexData = function (gltf, handler) {
    var visited = {};
    return ForEach.mesh(gltf, function (mesh) {
        return ForEach.meshPrimitive(mesh, function (primitive) {
            var indices = primitive.indices;
            if (defined(indices) && !defined(visited[indices])) {
                visited[indices] = true;
                var value = handler(indices);
                if (defined(value)) {
                    return value;
                }
            }
        });
    });
};
ForEach.animation = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'animations', handler);
};
ForEach.animationChannel = function (animation, handler) {
    var channels = animation.channels;
    return ForEach.object(channels, handler);
};
ForEach.animationSampler = function (animation, handler) {
    var samplers = animation.samplers;
    return ForEach.object(samplers, handler);
};
ForEach.buffer = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'buffers', handler);
};
ForEach.bufferAsync = function (gltf, handler) {
    return ForEach.topLevelAsync(gltf, 'buffers', handler);
};
ForEach.bufferView = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'bufferViews', handler);
};
ForEach.camera = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'cameras', handler);
};
ForEach.image = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'images', handler);
};
ForEach.imageAsync = function (gltf, handler) {
    return ForEach.topLevelAsync(gltf, 'images', handler);
};
ForEach.compressedImage = function (image, handler) {
    if (defined(image.extras)) {
        var compressedImages = image.extras.compressedImage3DTiles;
        for (var type in compressedImages) {
            if (compressedImages.hasOwnProperty(type)) {
                var compressedImage = compressedImages[type];
                var value = handler(compressedImage, type);
                if (defined(value)) {
                    return value;
                }
            }
        }
    }
};
ForEach.compressedImageAsync = function (image, handler) {
    return __awaiter(this, void 0, void 0, function () {
        var compressedImages, _a, _b, _i, type, compressedImage, value;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!defined(image.extras)) return [3 /*break*/, 4];
                    compressedImages = image.extras.compressedImage3DTiles;
                    _a = [];
                    for (_b in compressedImages)
                        _a.push(_b);
                    _i = 0;
                    _c.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    type = _a[_i];
                    if (!compressedImages.hasOwnProperty(type)) return [3 /*break*/, 3];
                    compressedImage = compressedImages[type];
                    return [4 /*yield*/, handler(compressedImage, type)];
                case 2:
                    value = _c.sent();
                    if (defined(value)) {
                        return [2 /*return*/, value];
                    }
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
};
ForEach.material = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'materials', handler);
};
ForEach.materialValue = function (material, handler) {
    var values = material.values;
    if (defined(material.extensions) && defined(material.extensions.KHR_techniques_webgl)) {
        values = material.extensions.KHR_techniques_webgl.values;
    }
    for (var name_1 in values) {
        if (values.hasOwnProperty(name_1)) {
            var value = handler(values[name_1], name_1);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.mesh = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'meshes', handler);
};
ForEach.meshPrimitive = function (mesh, handler) {
    var primitives = mesh.primitives;
    if (defined(primitives)) {
        var primitivesLength = primitives.length;
        for (var i = 0; i < primitivesLength; i++) {
            var primitive = primitives[i];
            var value = handler(primitive, i);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.meshPrimitiveAttribute = function (primitive, handler) {
    var attributes = primitive.attributes;
    for (var semantic in attributes) {
        if (attributes.hasOwnProperty(semantic)) {
            var value = handler(attributes[semantic], semantic);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.meshPrimitiveTarget = function (primitive, handler) {
    var targets = primitive.targets;
    if (defined(targets)) {
        var length_3 = targets.length;
        for (var i = 0; i < length_3; ++i) {
            var value = handler(targets[i], i);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.meshPrimitiveTargetAttribute = function (target, handler) {
    for (var semantic in target) {
        if (target.hasOwnProperty(semantic)) {
            var accessorId = target[semantic];
            var value = handler(accessorId, semantic);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.node = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'nodes', handler);
};
ForEach.nodeInTree = function (gltf, nodeIds, handler) {
    var nodes = gltf.nodes;
    if (defined(nodes)) {
        var length_4 = nodeIds.length;
        for (var i = 0; i < length_4; i++) {
            var nodeId = nodeIds[i];
            var node = nodes[nodeId];
            if (defined(node)) {
                var value = handler(node, nodeId);
                if (defined(value)) {
                    return value;
                }
                var children = node.children;
                if (defined(children)) {
                    value = ForEach.nodeInTree(gltf, children, handler);
                    if (defined(value)) {
                        return value;
                    }
                }
            }
        }
    }
};
ForEach.nodeInScene = function (gltf, scene, handler) {
    var sceneNodeIds = scene.nodes;
    if (defined(sceneNodeIds)) {
        return ForEach.nodeInTree(gltf, sceneNodeIds, handler);
    }
};
ForEach.program = function (gltf, handler) {
    if (hasExtension(gltf, 'KHR_techniques_webgl')) {
        return ForEach.object(gltf.extensions.KHR_techniques_webgl.programs, handler);
    }
    return ForEach.topLevel(gltf, 'programs', handler);
};
ForEach.sampler = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'samplers', handler);
};
ForEach.scene = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'scenes', handler);
};
ForEach.shader = function (gltf, handler) {
    if (hasExtension(gltf, 'KHR_techniques_webgl')) {
        return ForEach.object(gltf.extensions.KHR_techniques_webgl.shaders, handler);
    }
    return ForEach.topLevel(gltf, 'shaders', handler);
};
ForEach.shaderAsync = function (gltf, handler) {
    if (hasExtension(gltf, 'KHR_techniques_webgl')) {
        return ForEach.objectAsync(gltf.extensions.KHR_techniques_webgl.shaders, handler);
    }
    return ForEach.topLevelAsync(gltf, 'shaders', handler);
};
ForEach.skin = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'skins', handler);
};
ForEach.techniqueAttribute = function (technique, handler) {
    var attributes = technique.attributes;
    for (var attributeName in attributes) {
        if (attributes.hasOwnProperty(attributeName)) {
            var value = handler(attributes[attributeName], attributeName);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.techniqueUniform = function (technique, handler) {
    var uniforms = technique.uniforms;
    for (var uniformName in uniforms) {
        if (uniforms.hasOwnProperty(uniformName)) {
            var value = handler(uniforms[uniformName], uniformName);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.techniqueParameter = function (technique, handler) {
    var parameters = technique.parameters;
    for (var parameterName in parameters) {
        if (parameters.hasOwnProperty(parameterName)) {
            var value = handler(parameters[parameterName], parameterName);
            if (defined(value)) {
                return value;
            }
        }
    }
};
ForEach.technique = function (gltf, handler) {
    if (hasExtension(gltf, 'KHR_techniques_webgl')) {
        return ForEach.object(gltf.extensions.KHR_techniques_webgl.techniques, handler);
    }
    return ForEach.topLevel(gltf, 'techniques', handler);
};
ForEach.texture = function (gltf, handler) {
    return ForEach.topLevel(gltf, 'textures', handler);
};
ForEach.audioClip = function (gltf, handler) {
    var audios = ((gltf.extensions || {}).Sein_audioClips || {}).clips || [];
    return ForEach.object(audios, handler);
};
ForEach.audioClipAsync = function (gltf, handler) {
    var audios = ((gltf.extensions || {}).Sein_audioClips || {}).clips || [];
    return ForEach.objectAsync(audios, handler);
};
