'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var Cesium = require('cesium');
var getJsonBufferPadded = require('./getJsonBufferPadded');
var processGltf = require('./processGltf');
var defaultValue = Cesium.defaultValue;
var defined = Cesium.defined;
module.exports = gltfToGlb;
/**
 * Convert a glTF to glb.
 *
 * @param {Object} gltf A javascript object containing a glTF asset.
 * @param {Object} [options] The same options object as {@link processGltf}
 * @returns {Promise} A promise that resolves to a buffer containing the glb contents.
 */
function gltfToGlb(gltf, options) {
    return __awaiter(this, void 0, void 0, function () {
        var results, separateResources;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = defaultValue(options, {});
                    options.bufferStorage = {
                        buffer: undefined
                    };
                    return [4 /*yield*/, processGltf(gltf, options)];
                case 1:
                    results = _a.sent();
                    separateResources = results.separateResources;
                    return [2 /*return*/, {
                            glb: getGlb(results.gltf, options.bufferStorage.buffer),
                            separateResources: separateResources
                        }];
            }
        });
    });
}
function getGlb(gltf, binaryBuffer) {
    var jsonBuffer = getJsonBufferPadded(gltf);
    // Compute glb length: (Global header) + (JSON chunk header) + (JSON chunk) + [(Binary chunk header) + (Binary chunk)]
    var glbLength = 12 + 8 + jsonBuffer.length;
    if (defined(binaryBuffer)) {
        glbLength += 8 + binaryBuffer.length;
    }
    var glb = Buffer.alloc(glbLength);
    // Write binary glTF header (magic, version, length)
    var byteOffset = 0;
    glb.writeUInt32LE(0x46546C67, byteOffset);
    byteOffset += 4;
    glb.writeUInt32LE(2, byteOffset);
    byteOffset += 4;
    glb.writeUInt32LE(glbLength, byteOffset);
    byteOffset += 4;
    // Write JSON Chunk header (length, type)
    glb.writeUInt32LE(jsonBuffer.length, byteOffset);
    byteOffset += 4;
    glb.writeUInt32LE(0x4E4F534A, byteOffset); // JSON
    byteOffset += 4;
    // Write JSON Chunk
    jsonBuffer.copy(glb, byteOffset);
    byteOffset += jsonBuffer.length;
    if (defined(binaryBuffer)) {
        // Write Binary Chunk header (length, type)
        glb.writeUInt32LE(binaryBuffer.length, byteOffset);
        byteOffset += 4;
        glb.writeUInt32LE(0x004E4942, byteOffset); // BIN
        byteOffset += 4;
        // Write Binary Chunk
        binaryBuffer.copy(glb, byteOffset);
    }
    return glb;
}
