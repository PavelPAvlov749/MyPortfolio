"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @File   : compressTextures.ts
 * @Author : dtysky (dtysky@outlook.com)
 * @Date   : 11/25/2019, 2:21:50 PM
 * @Description:
 */
var path = require("path");
var seinjs_texture_compressor_1 = require("seinjs-texture-compressor");
var utils_1 = require("./utils");
function compressTextures(gltf, baseDir, options, origOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var quality, excludes, astc, pvrtc, etc, s3tc, fallback, images, index, _loop_1, _i, images_1, image;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!gltf.images || gltf.images.length === 0) {
                        return [2 /*return*/, gltf];
                    }
                    quality = origOptions.quality, excludes = origOptions.excludes, astc = origOptions.astc, pvrtc = origOptions.pvrtc, etc = origOptions.etc, s3tc = origOptions.s3tc, fallback = origOptions.fallback;
                    images = gltf.images;
                    index = -1;
                    _loop_1 = function (image) {
                        var t, ext, destFormat, isTransparent, isNormalMap, useMipmaps, destType, destEncoding, destQuality, destPath_1, destType_1, fp, destPath, error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    index += 1;
                                    if (utils_1.checkFileWithRules(image.uri, excludes)) {
                                        return [2 /*return*/, "continue"];
                                    }
                                    t = utils_1.getAssetType(image.uri);
                                    if (t !== 'relative') {
                                        return [2 /*return*/, "continue"];
                                    }
                                    ext = path.extname(image.uri);
                                    destFormat = options.name;
                                    isTransparent = false;
                                    isNormalMap = false;
                                    useMipmaps = true;
                                    if (image.extras) {
                                        isNormalMap = image.extras.isNormalMap || false;
                                        useMipmaps = image.extras.useMipmaps === false ? false : true;
                                        if (image.extras.type === 'HDR') {
                                            if (image.extras.format !== 'RGBD') {
                                                if (ext === '.exr') {
                                                    // destFormat = options.hdrTransparent;
                                                    isTransparent = true;
                                                }
                                                else if (ext === '.hdr') {
                                                    // destFormat = options.hdrOpaque;
                                                }
                                            }
                                        }
                                        else {
                                            if (image.extras.format === 'RGB') {
                                                // destFormat = options.ldrOpaque;
                                            }
                                            else if (ext === '.png') {
                                                isTransparent = true;
                                                // destFormat = options.ldrTransparent;
                                            }
                                            else {
                                                // destFormat = options.ldrOpaque;
                                            }
                                        }
                                    }
                                    else {
                                        if (ext === '.png') {
                                            isTransparent = true;
                                            // destFormat = options.ldrTransparent;
                                        }
                                        else {
                                            // destFormat = options.ldrOpaque;
                                        }
                                    }
                                    if (!destFormat) {
                                        return [2 /*return*/, "continue"];
                                    }
                                    destType = destFormat;
                                    destEncoding = null;
                                    destQuality = null;
                                    if (destFormat === 'fallback') {
                                        if (fallback.excludes && utils_1.checkFileWithRules(image.uri, fallback.excludes)) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        if (isNormalMap) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        destPath_1 = image.uri.replace(ext, "-" + options.name + "." + (isTransparent ? 'png' : 'jpg'));
                                        destType_1 = null;
                                        if (isTransparent && fallback.useRGBA4444) {
                                            destType_1 = 'RGBA4444';
                                        }
                                        else if (!isTransparent && fallback.useRGB565) {
                                            destType_1 = 'RGB565';
                                        }
                                        if (!destType_1) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        console.log("packing: " + destPath_1);
                                        fp = path.join(baseDir, image.uri);
                                        destPath_1 = image.uri;
                                        if (destType_1 === 'RGBA4444') {
                                            /**
                                             * @todo 后续再研究
                                             */
                                            // const png = PNG.decode(fs.readFileSync(fp));
                                            // const source = PNG.toRGBA8(png)[0];
                                            // const buf = new Uint8Array(new ArrayBuffer(png.width * png.height * 2));
                                            // for (let x = 0; x < png.width; x += 1) {
                                            //   for (let y = 0; y < png.height; y += 1) {
                                            //     const pos = y * png.width + x;
                                            //     const sPos = pos * 4;
                                            //     const dPos = pos * 2;
                                            //     buf[dPos] = (source[sPos] << 4) | source[sPos + 1];
                                            //     buf[dPos + 1] = (source[sPos + 2] << 4) | source[sPos + 3];
                                            //   }  
                                            // }
                                            // const res = PNG.encodeLL([buf.buffer], png.width, png.height, 3, 1, 4);
                                            // const data = Buffer.from(res);
                                            // fs.writeFileSync(path.join(baseDir, destPath), data);
                                        }
                                        else {
                                            /**
                                             * @todo 如果必要再加上，目前看起来JPG省不了多少，只改目标类型
                                             */
                                        }
                                        gltf.textures.forEach(function (tex) {
                                            if (tex.source === index) {
                                                tex.extensions = tex.extensions || {};
                                                tex.extensions.Sein_textureImprove = tex.extensions.Sein_textureImprove || {};
                                                tex.extensions.Sein_textureImprove.textureType = destType_1 === 'RGBA4444' ? 32819 : 33635;
                                            }
                                        });
                                        image.uri = destPath_1;
                                        return [2 /*return*/, "continue"];
                                    }
                                    if (destFormat === 'astc') {
                                        if (astc.excludes && utils_1.checkFileWithRules(image.uri, astc.excludes)) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        // https://developer.nvidia.com/astc-texture-compression-for-game-assets
                                        if (quality === 'high') {
                                            destEncoding = (isTransparent || isNormalMap) ? astc.formatTransparent || 'ASTC_4x4' : astc.formatOpaque || 'ASTC_6x6';
                                            destQuality = astc.quality || 'astcthorough';
                                        }
                                        else if (quality === 'medium') {
                                            destEncoding = (isTransparent || isNormalMap) ? astc.formatTransparent || 'ASTC_6x6' : astc.formatOpaque || 'ASTC_8x5';
                                            destQuality = astc.quality || 'astcmedium';
                                        }
                                        else {
                                            destEncoding = (isTransparent || isNormalMap) ? astc.formatTransparent || 'ASTC_8x5' : astc.formatOpaque || 'ASTC_8x6';
                                            destQuality = astc.quality || 'astcfast';
                                        }
                                    }
                                    else if (destFormat === 'pvrtc') {
                                        if (pvrtc.excludes && utils_1.checkFileWithRules(image.uri, pvrtc.excludes)) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        if (quality === 'low') {
                                            destEncoding = (isTransparent && !isNormalMap) ? pvrtc.formatTransparent || 'PVRTC1_2' : pvrtc.formatOpaque || 'PVRTC1_2_RGB';
                                            destQuality = pvrtc.quality || 'pvrtcbest';
                                        }
                                        else {
                                            destEncoding = (isTransparent && !isNormalMap) ? pvrtc.formatTransparent || 'PVRTC1_4' : pvrtc.formatOpaque || 'PVRTC1_4_RGB';
                                            destQuality = pvrtc.quality || 'pvrtcnormal';
                                        }
                                    }
                                    else if (destFormat === 'etc') {
                                        if (etc.excludes && utils_1.checkFileWithRules(image.uri, etc.excludes)) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        destEncoding = (isTransparent && !isNormalMap) ? etc.formatTransparent || 'ETC2_RGBA' : etc.formatOpaque || 'ETC2_RGB';
                                        if (quality === 'low') {
                                            destQuality = etc.quality || 'etcslow';
                                        }
                                        else {
                                            destQuality = etc.quality || 'etcfast';
                                        }
                                    }
                                    else if (destFormat === 's3tc') {
                                        if (s3tc.excludes && utils_1.checkFileWithRules(image.uri, s3tc.excludes)) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        if (quality === 'low') {
                                            destEncoding = (isTransparent && !isNormalMap) ? s3tc.formatTransparent || 'DXT1A' : s3tc.formatOpaque || 'DXT1';
                                            destQuality = s3tc.quality || 'better';
                                        }
                                        else {
                                            destEncoding = (isTransparent && !isNormalMap) ? s3tc.formatTransparent || 'DXT3' : s3tc.formatOpaque || 'DXT3';
                                            destQuality = s3tc.quality || 'fast';
                                        }
                                    }
                                    else {
                                        console.warn("Not support format '" + destFormat + "', ignore......");
                                        return [2 /*return*/, "continue"];
                                    }
                                    destPath = image.uri.replace(ext, "-" + options.name + ".ktx");
                                    console.log("packing: " + destPath);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, seinjs_texture_compressor_1.pack({
                                            type: destType,
                                            input: path.join(baseDir, image.uri),
                                            output: path.join(baseDir, destPath),
                                            compression: destEncoding,
                                            quality: destQuality,
                                            verbose: true,
                                            mipmap: useMipmaps,
                                            square: destType === 'pvrtc' ? '+' : 'no'
                                        })];
                                case 2:
                                    _a.sent();
                                    image.uri = destPath;
                                    console.log("packed: " + destPath);
                                    return [3 /*break*/, 4];
                                case 3:
                                    error_1 = _a.sent();
                                    console.error("Compress error: '" + error_1.message + "'");
                                    return [2 /*return*/, "continue"];
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, images_1 = images;
                    _a.label = 1;
                case 1:
                    if (!(_i < images_1.length)) return [3 /*break*/, 4];
                    image = images_1[_i];
                    return [5 /*yield**/, _loop_1(image)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, gltf];
            }
        });
    });
}
exports.default = compressTextures;
