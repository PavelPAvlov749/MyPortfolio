"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @File   : utils.ts
 * @Author : dtysky (dtysky@outlook.com)
 * @Date   : 7/31/2019, 4:50:01 PM
 * @Description:
 */
var fs = require("fs");
var path = require("path");
var crypto = require("crypto");
var cp = require("ncp");
exports.isWin = process.platform === 'win32';
function emitFile(context, options, params) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!options.publish.enabled || checkFileWithRules(params.filePath, options.publish.excludes)) {
                        context.emitFile(params.distPath, params.data, null);
                        return [2 /*return*/, path.join(options.publicPath, params.distPath)];
                    }
                    return [4 /*yield*/, options.publish.publisher.publish(params)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.emitFile = emitFile;
function copyFile(from, to) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.copyFile(from, to, function (err) {
                        if (err) {
                            return reject(err);
                        }
                        resolve();
                    });
                })];
        });
    });
}
exports.copyFile = copyFile;
;
function readFile(filePath) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.readFile(filePath, { encoding: 'utf8' }, function (err, content) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(content);
                        }
                    });
                })];
        });
    });
}
exports.readFile = readFile;
;
function readFileBuffer(filePath) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.readFile(filePath, function (err, content) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(content);
                        }
                    });
                })];
        });
    });
}
exports.readFileBuffer = readFileBuffer;
;
function writeFile(filePath, buffer) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.writeFile(filePath, buffer, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(filePath);
                        }
                    });
                })];
        });
    });
}
exports.writeFile = writeFile;
;
cp.limit = 16;
cp.stopOnErr = true;
function copyDir(src, dest) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    cp(src, dest, function (err) {
                        if (err) {
                            console.error(err);
                            return reject(err);
                        }
                        resolve();
                    });
                })];
        });
    });
}
exports.copyDir = copyDir;
function checkFileWithRules(filePath, rules) {
    for (var index = 0; index < rules.length; index += 1) {
        var rule = rules[index];
        if (rule instanceof RegExp) {
            rule.lastIndex = 0;
            if (rule.test(filePath)) {
                return true;
            }
        }
        else if (rule(filePath)) {
            return true;
        }
    }
    return false;
}
exports.checkFileWithRules = checkFileWithRules;
function getMd5(buf) {
    return crypto.createHash('md5').update(buf).digest('hex').slice(0, 5);
}
exports.getMd5 = getMd5;
function getAssetType(uri) {
    if (/^http/i.test(uri)) {
        return 'absolute';
    }
    else if (/^data:[^;]+;base64,/.test(uri)) {
        return 'base64';
    }
    else {
        return 'relative';
    }
}
exports.getAssetType = getAssetType;
var splitStrings = function (a, sep) {
    if (sep === void 0) { sep = '/'; }
    return a.map(function (i) { return i.split(sep); });
};
var elAt = function (i) { return function (a) { return a[i]; }; };
var rotate = function (a) { return a[0].map(function (e, i) { return a.map(elAt(i)); }); };
var allElementsEqual = function (arr) { return arr.every(function (e) { return e === arr[0]; }); };
function getCommonDir(strs, sep) {
    if (sep === void 0) { sep = '/'; }
    return rotate(splitStrings(strs, sep))
        .filter(allElementsEqual).map(elAt(0)).join(sep);
}
exports.getCommonDir = getCommonDir;
