"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var path = require("path");
var options_1 = require("./options");
var processGlTF_1 = require("./processGlTF");
var utils_1 = require("./utils");
function SeinJSGlTFLoader(source) {
    return __awaiter(this, void 0, void 0, function () {
        var callback, options, compressTextureOptions, outputs, outputEntries, outputAssets, _i, compressTextureOptions_1, textureOpts, _a, type, content, fp, processedAssets, fileName, result, mimetype, resourcePath, finalRes, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    this.cacheable();
                    callback = this.async();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 8, , 9]);
                    options = options_1.getOptions(this);
                    compressTextureOptions = options.compressTextures.enabled ? [
                        {
                            name: 'astc',
                            required: ['WEBGL_compressed_texture_astc']
                        },
                        {
                            name: 'pvrtc',
                            required: ['WEBGL_compressed_texture_pvrtc']
                        },
                        {
                            name: 'etc',
                            required: ['WEBGL_compressed_texture_etc']
                        },
                        {
                            name: 's3tc',
                            required: ['WEBGL_compressed_texture_s3tc']
                        },
                        {
                            name: 'fallback',
                            required: []
                        }
                    ] : [
                        {
                            name: 'normal',
                            required: []
                        }
                    ];
                    outputs = [];
                    outputEntries = [];
                    outputAssets = [];
                    _i = 0, compressTextureOptions_1 = compressTextureOptions;
                    _b.label = 2;
                case 2:
                    if (!(_i < compressTextureOptions_1.length)) return [3 /*break*/, 7];
                    textureOpts = compressTextureOptions_1[_i];
                    if (textureOpts.required.length && !options.compressTextures[textureOpts.name].enabled) {
                        return [3 /*break*/, 6];
                    }
                    return [4 /*yield*/, processGlTF_1.default(this, source, options, textureOpts)];
                case 3:
                    _a = _b.sent(), type = _a.type, content = _a.content, fp = _a.filePath, processedAssets = _a.processedAssets, fileName = _a.fileName;
                    result = '';
                    if (options.base64.enabled && options.base64.includeGlTF) {
                        mimetype = '';
                        if (type === 'gltf') {
                            mimetype = 'application/json';
                            content = new Buffer(content);
                        }
                        else {
                            mimetype = 'application/octet-stream';
                        }
                        if (content.length < options.base64.threshold) {
                            result = "\"data:" + (mimetype || '') + ";base64," + content.toString('base64') + "\"";
                        }
                    }
                    if (!!result) return [3 /*break*/, 5];
                    resourcePath = this.resourcePath;
                    if (path.extname(resourcePath) !== path.extname(fp)) {
                        resourcePath = resourcePath.replace(path.extname(resourcePath), path.extname(fp));
                    }
                    return [4 /*yield*/, utils_1.emitFile(this, options, { data: content, distPath: fp, filePath: resourcePath })];
                case 4:
                    fp = _b.sent();
                    result = "'" + fp + "'";
                    _b.label = 5;
                case 5:
                    outputAssets = outputAssets.concat(processedAssets);
                    outputEntries.push({ name: fileName, type: textureOpts.name, url: result });
                    outputs.push({ result: result, required: textureOpts.required });
                    _b.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 2];
                case 7:
                    console.log('Entries: ', outputEntries);
                    console.log('Other assets: ', outputAssets);
                    finalRes = "function(game) {\n    if (!window.__gltf_loader_extensions) {\n      if (!game.renderer.gl) {\n        game.renderer.initContext();\n      }\n      var gl = game.renderer.gl;\n\n      window.__gltf_loader_extensions = {" + outputs.map(function (_a) {
                        var result = _a.result, required = _a.required;
                        return "\n      " + required.map(function (r) { return r + ": gl.getExtension('" + r + "') || gl.getExtension('WEBKIT_" + r + "') || gl.getExtension('MOZ_" + r + "'),\n"; });
                    }).join('') + "}\n    }\n\n  if (window.__force_fallback_compress_textures) {\n    return " + outputs.filter(function (o) { return o.required.length === 0; })[0].result + ";\n  }\n  \n  " + outputs.map(function (_a) {
                        var result = _a.result, required = _a.required;
                        return required.length === 0 ? "{\n      return " + result + ";\n    }\n  " : "if (" + required.map(function (r) { return "window.__gltf_loader_extensions['" + r + "']"; }).join(' && ') + ") {\n      return " + result + ";\n    }\n  ";
                    }).join('\n else ') + "\n  \n};\n    ";
                    callback(null, "module.exports = " + finalRes);
                    return [3 /*break*/, 9];
                case 8:
                    error_1 = _b.sent();
                    callback(error_1);
                    return [3 /*break*/, 9];
                case 9: return [2 /*return*/];
            }
        });
    });
}
module.exports = SeinJSGlTFLoader;
