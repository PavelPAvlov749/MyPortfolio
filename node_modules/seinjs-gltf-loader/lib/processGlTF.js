"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @File   : processGlTF.ts
 * @Author : dtysky (dtysky@outlook.com)
 * @Date   : 7/31/2019, 2:45:44 PM
 * @Description:
 */
var path = require("path");
var fs = require("fs");
var mime = require("mime");
var preProcessGLTFAsync_1 = require("./preProcessGLTFAsync");
var utils_1 = require("./utils");
var compressTextures_1 = require("./compressTextures");
var gltfToGlb = require('./gltf2glb/gltfToGlb');
function processGlTF(context, source, options, compressTextureOpts) {
    return __awaiter(this, void 0, void 0, function () {
        var resourcePath, fileName, rootDir, srcDir, commonDir, tmp, distDir, md5, isGlTF, processedAssets, filePath_1, gltfContent, compressed, glb, fp, filePath, actions, buffers, i, images, i, shaders, i, audios, i;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resourcePath = context.resourcePath;
                    fileName = path.basename(resourcePath, path.extname(resourcePath));
                    console.log("seinjs-gltf-loader: " + fileName + ", " + compressTextureOpts.name);
                    rootDir = (context.rootContext || context.options.context) + (utils_1.isWin ? '\\' : '/');
                    srcDir = path.dirname(resourcePath);
                    commonDir = utils_1.getCommonDir([srcDir, rootDir], utils_1.isWin ? '\\' : '/') + (utils_1.isWin ? '\\' : '/');
                    tmp = path.parse(srcDir.replace(commonDir, ''));
                    distDir = tmp.dir;
                    md5 = utils_1.getMd5(source);
                    isGlTF = path.extname(resourcePath) === '.gltf';
                    processedAssets = [];
                    // glb
                    if (!isGlTF) {
                        filePath_1 = path.join(distDir, fileName + '-' + md5 + '.glb');
                        return [2 /*return*/, { type: 'glb', filePath: filePath_1, content: fs.readFileSync(resourcePath), processedAssets: processedAssets, fileName: fileName }];
                    }
                    gltfContent = null;
                    if (!(options.compress.enabled && !utils_1.checkFileWithRules(resourcePath, options.compress.excludes))) return [3 /*break*/, 2];
                    console.log('compressing...');
                    return [4 /*yield*/, preProcessGLTFAsync_1.default(true, resourcePath, rootDir, options.compress.quantization)];
                case 1:
                    compressed = _a.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, preProcessGLTFAsync_1.default(false, resourcePath, rootDir, options.compress.quantization)];
                case 3:
                    compressed = _a.sent();
                    _a.label = 4;
                case 4:
                    gltfContent = compressed.json;
                    srcDir = compressed.dir;
                    if (!(options.compressTextures.enabled && compressTextureOpts.name !== 'normal')) return [3 /*break*/, 6];
                    return [4 /*yield*/, compressTextures_1.default(gltfContent, srcDir, compressTextureOpts, options.compressTextures)];
                case 5:
                    gltfContent = _a.sent();
                    _a.label = 6;
                case 6:
                    if (!(options.glb.enabled && !utils_1.checkFileWithRules(resourcePath, options.glb.excludes))) return [3 /*break*/, 8];
                    return [4 /*yield*/, gltfToGlb(gltfContent, {
                            resourceDirectory: srcDir,
                            separateCustom: function (fileName) {
                                return utils_1.checkFileWithRules(path.resolve(srcDir, fileName), options.glb.excludes);
                            },
                            prepareNonSeparateResources: function (uri, buf) { return __awaiter(_this, void 0, void 0, function () {
                                var index, processor;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!options.process.enabled) return [3 /*break*/, 4];
                                            index = 0;
                                            _a.label = 1;
                                        case 1:
                                            if (!(index < options.process.processors.length)) return [3 /*break*/, 4];
                                            processor = options.process.processors[index];
                                            if (!utils_1.checkFileWithRules(uri, [processor.test])) return [3 /*break*/, 3];
                                            return [4 /*yield*/, processor.process({ data: buf, filePath: uri })];
                                        case 2:
                                            buf = _a.sent();
                                            _a.label = 3;
                                        case 3:
                                            index += 1;
                                            return [3 /*break*/, 1];
                                        case 4: return [2 /*return*/, buf];
                                    }
                                });
                            }); },
                            prepareSeparateResource: function (uri, buf) { return __awaiter(_this, void 0, void 0, function () {
                                var fp, index, processor, ext, md5, distPath;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            fp = path.join(distDir, uri);
                                            if (!options.process.enabled) return [3 /*break*/, 4];
                                            index = 0;
                                            _a.label = 1;
                                        case 1:
                                            if (!(index < options.process.processors.length)) return [3 /*break*/, 4];
                                            processor = options.process.processors[index];
                                            if (!utils_1.checkFileWithRules(uri, [processor.test])) return [3 /*break*/, 3];
                                            return [4 /*yield*/, processor.process({ data: buf, filePath: uri })];
                                        case 2:
                                            buf = _a.sent();
                                            _a.label = 3;
                                        case 3:
                                            index += 1;
                                            return [3 /*break*/, 1];
                                        case 4:
                                            ext = path.extname(fp);
                                            md5 = utils_1.getMd5(buf);
                                            distPath = fp.replace(ext, '-' + md5 + ext);
                                            return [4 /*yield*/, utils_1.emitFile(context, options, { data: buf, distPath: distPath, filePath: uri })];
                                        case 5:
                                            fp = _a.sent();
                                            processedAssets.push(fp);
                                            return [2 /*return*/, fp];
                                    }
                                });
                            }); }
                        })];
                case 7:
                    glb = (_a.sent()).glb;
                    fp = path.join(distDir, fileName + '-' + compressTextureOpts.name + '-' + utils_1.getMd5(glb) + '.glb');
                    return [2 /*return*/, { type: 'glb', filePath: fp, content: glb, processedAssets: processedAssets, fileName: fileName }];
                case 8:
                    filePath = path.join(distDir, fileName + '-' + compressTextureOpts.name + '-' + md5 + '.gltf');
                    actions = [];
                    buffers = gltfContent.buffers || [];
                    for (i = 0; i < buffers.length; i += 1) {
                        actions.push(processAsset(context, options, buffers[i], srcDir, distDir));
                    }
                    images = gltfContent.images || [];
                    for (i = 0; i < images.length; i += 1) {
                        actions.push(processAsset(context, options, images[i], srcDir, distDir));
                    }
                    shaders = (((gltfContent.extensions || {}).KHR_techniques_webgl || {}).shaders || []);
                    for (i = 0; i < shaders.length; i += 1) {
                        actions.push(processAsset(context, options, shaders[i], srcDir, distDir));
                    }
                    audios = ((gltfContent.extensions || {}).Sein_audioClips || {}).clips || [];
                    for (i = 0; i < audios.length; i += 1) {
                        actions.push(processAsset(context, options, audios[i], srcDir, distDir));
                    }
                    return [4 /*yield*/, Promise.all(actions).then(function (uris) {
                            processedAssets.push.apply(processedAssets, uris);
                        })];
                case 9:
                    _a.sent();
                    compressed.removeTmp();
                    return [2 /*return*/, { type: 'gltf', filePath: filePath, content: JSON.stringify(gltfContent), processedAssets: processedAssets, fileName: fileName }];
            }
        });
    });
}
exports.default = processGlTF;
function processAsset(context, options, obj, srcDir, distDir) {
    return __awaiter(this, void 0, void 0, function () {
        var t, filePath;
        var _this = this;
        return __generator(this, function (_a) {
            t = utils_1.getAssetType(obj.uri);
            /**
             * @todo: support absolute path
             */
            if (t !== 'relative') {
                return [2 /*return*/];
            }
            filePath = path.resolve(srcDir, obj.uri);
            return [2 /*return*/, utils_1.readFileBuffer(filePath)
                    .then(function (data) { return __awaiter(_this, void 0, void 0, function () {
                    var index, processor, mimetype, tmp, prefix, fp;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                context.addDependency(path.resolve(context.context, obj.uri));
                                if (!options.process.enabled) return [3 /*break*/, 4];
                                index = 0;
                                _a.label = 1;
                            case 1:
                                if (!(index < options.process.processors.length)) return [3 /*break*/, 4];
                                processor = options.process.processors[index];
                                if (!utils_1.checkFileWithRules(filePath, [processor.test])) return [3 /*break*/, 3];
                                return [4 /*yield*/, processor.process({ data: data, filePath: filePath })];
                            case 2:
                                data = _a.sent();
                                _a.label = 3;
                            case 3:
                                index += 1;
                                return [3 /*break*/, 1];
                            case 4:
                                if (options.base64.enabled && data.length < options.base64.threshold) {
                                    if (!utils_1.checkFileWithRules(filePath, options.base64.excludes)) {
                                        mimetype = mime.getType(filePath);
                                        return [2 /*return*/, "data:" + (mimetype || '') + ";base64," + data.toString('base64')];
                                    }
                                }
                                tmp = path.parse(obj.uri);
                                prefix = tmp.dir ? tmp.dir.split('/') : [];
                                prefix.push(tmp.name, utils_1.getMd5(data));
                                fp = path.join(distDir, prefix.join('-') + tmp.ext);
                                return [2 /*return*/, utils_1.emitFile(context, options, { data: data, distPath: fp, filePath: filePath })];
                        }
                    });
                }); })
                    .then(function (uri) {
                    obj.uri = uri;
                    return uri;
                })];
        });
    });
}
