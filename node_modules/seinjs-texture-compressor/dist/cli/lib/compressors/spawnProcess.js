"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Native
const child_process_1 = require("child_process");
const path_1 = require("path");
// Utilities
const utilities_1 = require("../utilities");
/**
 * Spawn a child process of a texture compression tool (e.g. PVRTexTool, Crunch)
 *
 * @param args Command line arguments
 * @param flagMapping Flags to pass to the texture compression tool
 * @param binaryName Name of the texture compression tool
 */
exports.spawnProcess = (args, flagMapping, binaryName) => {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        const binDir = yield utilities_1.getBinaryDirectory();
        const toolPath = path_1.join(binDir, binaryName);
        const toolFlags = args.flags ? utilities_1.splitFlagAndValue(utilities_1.createFlagsForTool(args.flags)) : [];
        const combinedFlags = [...flagMapping, ...toolFlags];
        if (args.verbose) {
            console.log(`Using flags: ${combinedFlags}`);
        }
        const child = child_process_1.spawn(toolPath, combinedFlags, {
            // @ts-ignore
            env: {
                PATH: binDir || process.env,
            },
        });
        if (args.verbose) {
            child.stdout.on('data', (data) => console.log(`${data}`));
            child.stderr.on('data', (data) => {
                console.log(`${data}`);
            });
        }
        child.once('exit', (code) => {
            if (code !== 0) {
                reject(new Error(`Compression tool exited with error code ${code}`));
            }
            else {
                resolve();
            }
        });
    }));
};
//# sourceMappingURL=spawnProcess.js.map